function [Y,Xf,Af] = BearingCapacityNNetFxn(X,~,~)
%BEARINGCAPACITYNNETFXN neural network simulation function.
%
% Auto-generated by MATLAB, 28-Mar-2024 14:24:12.
% 
% [Y] = BearingCapacityNNetFxn(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.03;0.03;0;0;0.849181141;0;0];
x1_step1.gain = [0.651465798045603;0.651465798045603;1.25;0.0446428571428571;0.106253270557682;0.0178571428571429;0.0871372910423743];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.1218909650321959859;2.5441116491063540117;1.3664730688627984012;-2.2328650363014146407;-1.5071749630303501455;0.45718400260933017565;-0.4611921094923582265;-0.45485154751743200885;-0.14469870749780364139;1.7271295118699478977];
IW1_1 = [-1.0116131795413492167 0.88496528829546738937 1.6685309179264506962 0.28226835438106340215 -1.1497659463638738586 0.42394811674341414953 0.92224163291678162846;-2.1882786104347360379 1.2918310814349327487 -1.0577979985192262902 -5.8709258130034340795 0.090421329812923889602 -1.2791005224073557223 -1.1007888192267687444;-0.78405563821633506016 -0.027035683694408674249 1.1757447166030243757 0.55170067050011939447 -1.3904044911482698055 -0.97940037965130599673 0.42472464049065661307;1.3508905524112932994 -0.35192959215419589158 1.3426002493772521973 -2.0325141213619435376 0.79804651983019181394 1.8555829829238428275 1.8151917200089495719;1.2743550630418087888 -0.088118852495543020797 0.0092594557064415040221 1.3402613876943447746 3.5033749276373344905 1.4530261699871171999 1.0211008440999875813;1.1403305166149617644 0.21565845665331584424 3.586025135044305312 1.0682754002033110208 -0.10626820340939183152 -1.2478482133498507434 2.8327527602442357235;-1.7684291991904224073 0.50696603405188600533 -1.2026286716906142704 1.3008939060040096702 -0.72238234796731626286 -1.4346039864641462191 -1.3980757498338314271;-1.6546227787922656027 0.072363567134787337709 -0.16095173126627837501 1.373141261598997076 -1.0625653682603137806 -0.48489207793185090667 1.3817580352277378797;0.27440267278372199033 1.2790006271015004202 0.51159684856449672008 -1.6322466893922158437 0.77054346229890646747 -0.9306320327932418035 -1.0996014414284882577;1.0482104319936706993 -1.7759872147839168566 0.77295843305453915129 -1.2126156862116348467 -0.086257281126443222097 -0.42709350653735916881 -0.76485145498007445219];

% Layer 2
b2 = 1.5908879669442701488;
LW2_1 = [0.49173384490453586615 -1.5928647381728220367 -1.4648897948066224028 0.067153986890924097231 -0.64646215161549436257 0.68897524876303262165 0.65323063255705493546 -0.28388328919993233157 -0.43835166626879340512 -0.35216116016036347336];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.000705965407695023;
y1_step1.xoffset = 14;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
